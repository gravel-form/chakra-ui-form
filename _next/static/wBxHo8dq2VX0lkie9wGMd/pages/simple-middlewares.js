(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{BGgm:function(n,t,e){"use strict";e.r(t);var a=e("q1tI"),o=e("xS4D"),r=a.createElement;t.default=function(){return r(o.a,{code:"const {\n  toJSONSchemaPath,\n  isRequired,\n} = GravelFormCore;\n\nconst {\n  Button,\n  ButtonGroup,\n  useToast,\n  Tooltip,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Icon,\n} = ChakraUiCore;\nconst { delay }= Bluebird;\n\nconst MyButtonsMw = (props) => {\n  const {\n    parent,\n    next,\n    onChange,\n    formProps: { defaultData },\n  } = props;\n\n  const toast = useToast();\n  const [submitting, setSubmitting] = React.useState(false);\n\n  // if not on the root node, pass the control to the next middleware\n  if (parent) return next(props);\n\n  const handleSubmit = async function() {\n    setSubmitting(true);\n    await delay(1000);\n    setSubmitting(false);\n    toast({\n      title: 'Success',\n      description: 'Form Summited',\n      status: 'success',\n      isClosable: true,\n    });\n  };\n\n  const handleClear = () => onChange({});\n  const handleReset = () => onChange(defaultData);\n\n  return (\n    <>\n      {next(props) /* render the body of the form */}\n      <ButtonGroup spacing={4}>\n        <Button variantColor=\"teal\" variant=\"solid\" onClick={handleSubmit} isLoading={submitting}>\n          Submit\n        </Button>{' '}\n        <Button onClick={handleClear}>Clear</Button> <Button onClick={handleReset}>Reset</Button></ButtonGroup>\n    </>\n  );\n};\n\nconst MyFormItemTemplate = (props) => {\n  const { schema, dataPath, parent, next, errors } = props;\n\n  if (\n    typeof schema === 'boolean' ||\n    schema.type === 'object' ||\n    schema.type === 'array' ||\n    // skip if current node is under an array\n    (parent && typeof parent.schema !== 'boolean' && parent.schema.type === 'array')\n  )\n    return next(props);\n\n  const labelText = schema.title || dataPath[dataPath.length - 1];\n  const label = schema.description ? (\n    <Tooltip aria-label={schema.description} label={schema.description}>\n      <span>\n        {labelText} <Icon name=\"info\" />\n      </span>\n    </Tooltip>\n  ) : (\n    labelText\n  );\n\n  const id = toJSONSchemaPath(dataPath);\n  const error = errors && errors.find(({ dataPath }) => dataPath === id);\n\n  return (\n    <FormControl isRequired={isRequired(props)} isInvalid={!!error} my={4}>\n      <FormLabel>{label}</FormLabel>\n      {next(props)}\n      <FormErrorMessage>{error ? error.message : null}</FormErrorMessage>\n    </FormControl>\n  );\n};\n\nconst schema = {\n  type: 'object',\n  properties: {\n    username: { type: 'string', description: 'Username description' },\n    firstname: { type: 'string' },\n    lastname: { type: 'string' },\n    email: { type: 'string', description: 'Email description' },\n  },\n};\n\nconst defaultData = {\n  username: 'jhon',\n  firstname: 'Jhon',\n  lastname: 'Smith',\n};\n\nconst middlewares = [\n  MyButtonsMw,\n  FieldsetTemplateMw,\n  MyFormItemTemplate,\n  ...schemaMws,\n  InputMw,\n  NotSupportedMw\n];\n\nrender(\n  <Form\n    defaultData={defaultData}\n    schema={schema}\n    middlewares={middlewares}\n  />\n);\n"})}},QhYp:function(n,t,e){(window.__NEXT_P=window.__NEXT_P||[]).push(["/simple-middlewares",function(){return e("BGgm")}])}},[["QhYp",0,1,3,5,4,2,6]]]);